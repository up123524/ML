from itertools import count
from os import stat
from pstats import Stats
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy import stats
from scipy.stats import norm
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')
from pstats import Stats
%matplotlib inline

df_train=pd.read_csv("/Users/umar/Documents/practise datasets/house-prices-advanced-regression-techniques/train.csv")
len(df_train.columns)

df_train['SalePrice'].describe()

sns.distplot(df_train['SalePrice'])
plt.show()
##significant positive skew

print("Skewness:%f"%df_train['SalePrice'].skew())
print("Kurtosis:%f"%df_train['SalePrice'].kurt())
print(df_train['SalePrice'].skew().round(4))

#relationship with predictor variables
var='GrLivArea'
data=pd.concat([df_train['SalePrice'],df_train[var]], axis=1)
data.plot.scatter(x=var,y='SalePrice',ylim=(0,800000))
plt.show()
#significant positive linear correlation

var='TotalBsmtSF'
data=pd.concat([df_train['SalePrice'],df_train[var]], axis=1)
data.plot.scatter(x=var,y='SalePrice',ylim=(0,800000))
plt.show()

#categorical varibles
var='OverallQual'
data=pd.concat([df_train['SalePrice'],df_train[var]], axis=1)
f, ax=plt.subplots(figsize=(5,15))
fig=sns.boxplot(x=var,y='SalePrice',data=data)
fig.axis(ymin=0,ymax=800000)
plt.show()

var='YearBuilt'
data=pd.concat([df_train['SalePrice'],df_train[var]], axis=1)
f, ax=plt.subplots(figsize=(16,8))
fig=sns.boxplot(x=var,y='SalePrice',data=data)
fig.axis(ymin=0,ymax=800000)
plt.xticks(rotation=90)
plt.show()

##correlation splot
corrmat=df_train.corr()
f,ax=plt.subplots(figsize=(12,9))
sns.heatmap(corrmat,vmax=.8,square=True)
plt.show()

#  heatmap
k=10
cols=corrmat.nlargest(k,'SalePrice')['SalePrice'].index
cm=np.corrcoef(df_train[cols].values.T)
sns.set(font_scale=1.25)
hm=sns.heatmap(cm,cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size':10},
yticklabels=cols.values, xticklabels=cols.values)
plt.show()

#scatter plots
sns.sets()
cols=['SalePrice','OverallQual','GrLivArea','GarageArea','GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']
sns.pairplot(df_train[cols],size=2.5)
plt.show()

total=df_train.isnull().sum().sort_values(ascending=False)
percent=(df_train.isnull().sum()/df_train.isnull().count()).sort_values(ascending=False)
missing_data=pd.concat([total,percent],axis=1,keys=['Total','Percent'])
missing_data.head(20)

df_train=df_train.drop((missing_data[missing_data['Total']>1]).index,1)
df_train=df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)
df_train.isnull().sum().max()

##outliers
#standadise data
saleprice_scaled=StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);
low_range=saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]
high_range=saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]
print('outer range (low) of the distribution:')
print(low_range)
print('\nouter range (high) of the distribution:')
print(high_range)

#bivariate analysis

var = 'GrLivArea'
data = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)
data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));

df_train.sort_values(by='GrLivArea', ascending=False)[:2]
df_train=df_train.drop(df_train[df_train["Id"]==1299].index)
df_train=df_train.drop(df_train[df_train["Id"]==524].index)

var='TotalBsmtSF'
data=pd.concat([df_train['SalePrice'],df_train[var]],axis=1)
data.plot.scatter(x=var, y='SalePrice',ylim=(0,800000), color=(0,0.2,0))
plt.show()

#look for norm dist
sns.distplot(df_train['SalePrice'], fit=norm)
fig=plt.figure()
res=stats.probplot(df_train['SalePrice'], plot=plt)
plt.show()
##for positive skew log transforms usually work very well

sns.distplot(df_train['GrLivArea'], fit = norm)
fig=plt.figure()
res=stats.probplot(df_train['GrLivArea'], plot=plt)
plt.show()

df_train['GrLivArea']=np.log(df_train['GrLivArea'])

sns.distplot(df_train['GrLivArea'], fit=norm)
fig=plt.figure()
res=stats.probplot(df_train['GrLivArea'], plot=plt)
plt.show()

sns.distplot(df_train['TotalBsmtSF'], fit = norm)
fig=plt.figure()
res=stats.probplot(df_train['TotalBsmtSF'], plot=plt)
plt.show()

##dont want to lose ffect of 0 of not having a 0 so create a bianry variable to apply log transform to non zero values
df_train['HasBsmt']=pd.Series(len(df_train['TotalBsmtSF']), index=df_train.index)
df_train['HasBsmt']=0
df_train.loc[df_train['TotalBsmtSF']>0, 'HasBsmt']=1
df_train['HasBsmt'].sample(20)

df_train.loc[df_train['HasBsmt']==1, 'TotalBsmtSf']=np.log(df_train['TotalBsmtSF'])

sns.distplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], fit = norm)
fig=plt.figure()
res=stats.probplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'],plot=plt)
plt.show()



